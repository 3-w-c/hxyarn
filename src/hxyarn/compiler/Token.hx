package hxyarn.compiler;

class Token {
	public var type:TokenType;
	public var lexeme:String;
	public var literal:Dynamic;
	public var line:Int;
	public var nodeName:String;

	public function new(type:TokenType, lexeme:String, literal:Dynamic, line:Int, nodeName:String) {
		this.type = type;
		this.lexeme = lexeme;
		this.literal = literal;
		this.line = line;
		this.nodeName = nodeName;
	}

	public function toString():String {
		return '${type.getName()} $lexeme $literal';
	}
}

enum TokenType {
	INDENT;
	DEDENT;
	WS;
	COMMENT;
	NEWLINE;
	ID;
	BODY_START; // ---
	HEADER_DELIMITER;
	HASHTAG; // #
	REST_OF_LINE;
	BODY_WS;
	BODY_END; // ===
	SHORTCUT_ARROW; // ->
	COMMAND_START; // <<
	EXPRESSION_START; // {
	TEXT_ESCAPE;
	TEXT_COMMENT;
	TEXT;
	TEXT_COMMANDHASHTAG_WS;
	TEXT_COMMANDHASHTAG_COMMENT;
	TEXT_COMMANDHASHTAG_ERROR;
	HASHTAG_WS;
	HASHTAG_TEXT;
	EXPR_WS;
	KEYWORD_TRUE;
	KEYWORD_FALSE;
	KEYWORD_NULL;
	OPERATOR_ASSIGNMENT;
	OPERATOR_LOGICAL_LESS_THAN_EQUALS;
	OPERATOR_LOGICAL_GREATER_THAN_EQUALS;
	OPERATOR_LOGICAL_EQUALS;
	OPERATOR_LOGICAL_LESS;
	OPERATOR_LOGICAL_GREATER;
	OPERATOR_LOGICAL_NOT_EQUALS;
	OPERATOR_LOGICAL_AND;
	OPERATOR_LOGICAL_OR;
	OPERATOR_LOGICAL_XOR;
	OPERATOR_LOGICAL_NOT;
	OPERATOR_MATHS_ADDITION_EQUALS;
	OPERATOR_MATHS_SUBTRACTION_EQUALS;
	OPERATOR_MATHS_MULTIPLICATION_EQUALS;
	OPERATOR_MATHS_MODULUS_EQUALS;
	OPERATOR_MATHS_DIVISION_EQUALS;
	OPERATOR_MATHS_ADDITION;
	OPERATOR_MATHS_SUBTRACTION;
	OPERATOR_MATHS_MULTIPLICATION;
	OPERATOR_MATHS_DIVISION;
	OPERATOR_MATHS_MODULUS;
	LPAREN;
	RPAREN;
	COMMA;
	EXPRESSION_AS;
	STRING;
	FUNC_ID;
	EXPRESSION_END;
	VAR_ID;
	DOT;
	NUMBER;
	COMMAND_WS;
	COMMAND_IF;
	COMMAND_ELSEIF;
	COMMAND_ELSE;
	COMMAND_SET;
	COMMAND_ENDIF;
	COMMAND_CALL;
	COMMAND_DECLARE;
	COMMAND_JUMP;
	COMMAND_ENUM;
	COMMAND_CASE;
	COMMAND_ENDENUM;
	COMMAND_LOCAL;
	COMMAND_END;
	COMMAND_TEXT_END;
	COMMAND_EXPRESSION_START;
	COMMAND_TEXT;
	TYPE_STRING;
	TYPE_NUMBER;
	TYPE_BOOL;
	DOUBLE_BACKSLASH; // \\
	JUMP_OPTION_START; // [[]
	JUMP_OPTION_END; // ]]
	JUMP_OPTION_LINK;
	EOF;
}
